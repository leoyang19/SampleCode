}
is_hex <- function(x){
if(is.character(x) != TRUE){
stop("invalid")
}
if(nchar(x) !=7){
return(FALSE)
}
str_chars = tolower(strsplit(x,'')[[1]])
valid = c(0;9, LETTERS[1:6])
if(str_chars[1] =='#'){
for (i in 2:nchar(x)){
if (!str_chars[i] %in% valid){
return(FALSE)}
}
}
return(TRUE)
}
if(nchar(x) !=7){
return(FALSE)
}
is_hex <- function(x){
if(is.character(x) != TRUE){
stop("invalid")
}
if(nchar(x) !=7){
return(FALSE)
}
str_chars = tolower(strsplit(x,'')[[1]])
valid = c(0:9, LETTERS[1:6])
if(str_chars[1] =='#'){
for (i in 2:nchar(x)){
if (!str_chars[i] %in% valid){
return(FALSE)}
}
}
return(TRUE)
}
is_hex <- function(x){
if(is.character(x) != TRUE){
stop("invalid")
}
if(nchar(x) !=7){
return(FALSE)
}
str_chars = tolower(strsplit(x,'')[[1]])
valid = c(0:9, LETTERS[1:6])
if(str_chars[1] =='#'){
for (i in 2:nchar(x)){
if (!str_chars[i] %in% valid){
return(FALSE)}
}
}
return(TRUE)
}
context("Test for is-hex-color")
test_that("is_hex() works as expected", {
expect_true(is_hex("#FF00A7"))
expect_true(is_hex("#ff0000"))
expect_true(is_hex("#123456"))
expect_true(is_hex("#12Fb56"))
expect_false(is_hex("FF0000"))
expect_false(is_hex("#1234GF"))
expect_false(is_hex("#1234567"))
expect_false(is_hex("blue"))
expect_error(is_hex(FF00A7))
expect_error(is_hex(TRUE))
})
test_that("is_hex() works as expected", {
expect_true(is_hex("#FF00A7"))
expect_true(is_hex("#ff0000"))
expect_true(is_hex("#123456"))
expect_true(is_hex("#12Fb56"))
expect_false(is_hex("FF0000"))
expect_false(is_hex("#1234GF"))
expect_false(is_hex("#1234567"))
expect_false(is_hex("blue"))
expect_error(is_hex(FF00A7))
expect_error(is_hex(TRUE))
})
is_hex <- function(x){
if(is.character(x) != TRUE){
stop("invalid")
}
if(nchar(x) !=7){
return(FALSE)
}
str_chars = tolower(strsplit(x,'')[[1]])
valid_characters = c(0:9, LETTERS[1:6])
if(str_chars[1] =='#'){
for (i in 2:nchar(x)){
if (!str_chars[i] %in% valid_characters){
return(FALSE)}
}
}
return(TRUE)
}
context("Test for is-hex-color")
test_that("is_hex() works as expected", {
expect_true(is_hex("#FF00A7"))
expect_true(is_hex("#ff0000"))
expect_true(is_hex("#123456"))
expect_true(is_hex("#12Fb56"))
expect_false(is_hex("FF0000"))
expect_false(is_hex("#1234GF"))
expect_false(is_hex("#1234567"))
expect_false(is_hex("blue"))
expect_error(is_hex(FF00A7))
expect_error(is_hex(TRUE))
})
is_hex <- function(x){
if(is.character(x) != TRUE){
stop("invalid")
}
if(nchar(x) !=7){
return(FALSE)
}
str_characters = tolower(strsplit(x,'')[[1]])
valid_characters = c(0:9, letters[1:6])
if(str_characters[1] =='#'){
for (i in 2:nchar(x)){
if (!str_chars[i] %in% valid_characters){
return(FALSE)}
}
}
return(TRUE)
}
context("Test for is-hex-color")
test_that("is_hex() works as expected", {
expect_true(is_hex("#FF00A7"))
expect_true(is_hex("#ff0000"))
expect_true(is_hex("#123456"))
expect_true(is_hex("#12Fb56"))
expect_false(is_hex("FF0000"))
expect_false(is_hex("#1234GF"))
expect_false(is_hex("#1234567"))
expect_false(is_hex("blue"))
expect_error(is_hex(FF00A7))
expect_error(is_hex(TRUE))
})
is_hex <- function(x){
if(is.character(x) != TRUE){
stop("invalid")
}
if(nchar(x) !=7){
return(FALSE)
}
str_characters = tolower(strsplit(x,'')[[1]])
valid_characters = c(0:9, letters[1:6])
if(str_characters[1] =='#'){
for (i in 2:nchar(x)){
if (!str_characters[i] %in% valid_characters){
return(FALSE)}
}
}
return(TRUE)
}
context("Test for is-hex-color")
test_that("is_hex() works as expected", {
expect_true(is_hex("#FF00A7"))
expect_true(is_hex("#ff0000"))
expect_true(is_hex("#123456"))
expect_true(is_hex("#12Fb56"))
expect_false(is_hex("FF0000"))
expect_false(is_hex("#1234GF"))
expect_false(is_hex("#1234567"))
expect_false(is_hex("blue"))
expect_error(is_hex(FF00A7))
expect_error(is_hex(TRUE))
})
is_hex <- function(x){
if(is.character(x) != TRUE){
stop("invalid")
}
if(nchar(x) !=7){
return(FALSE)
}
str_characters = tolower(strsplit(x,'')[[1]])
valid_characters = c(0:9, letters[1:6])
if(str_characters[1] =='#'){
for (i in 2:nchar(x)){
if (!str_characters[i] %in% valid_characters){
return(FALSE)}
}
}
return(TRUE)
}
context("Test for is-hex-color")
test_that("is_hex() works as expected", {
expect_true(is_hex("#FF00A7"))
expect_true(is_hex("#ff0000"))
expect_true(is_hex("#123456"))
expect_true(is_hex("#12Fb56"))
expect_false(is_hex("FF0000"))
expect_false(is_hex("#1234GF"))
expect_false(is_hex("#1234567"))
expect_false(is_hex("blue"))
expect_error(is_hex(FF00A7))
expect_error(is_hex(TRUE))
})
is_hex <- function(x){
if(is.character(x) != TRUE){
stop("invalid")
}
if(nchar(x) !=7){
return(FALSE)
}
str_characters = tolower(strsplit(x,'')[[1]])
valid_characters = c(0:9, letters[1:6])
if(str_characters[1] =='#'){
for (i in 2:nchar(x)){
if (!str_characters[i] %in% valid_characters){
return(FALSE)}
}
}
return(TRUE)
}
context("Test for is-hex-color")
test_that("is_hex() works as expected", {
expect_true(is_hex("#FF00A7"))
expect_true(is_hex("#ff0000"))
expect_true(is_hex("#123456"))
expect_true(is_hex("#12Fb56"))
expect_false(is_hex("FF0000"))
expect_false(is_hex("#1234GF"))
expect_false(is_hex("#1234567"))
expect_false(is_hex("blue"))
expect_error(is_hex(FF00A7))
expect_error(is_hex(TRUE))
})
is_hex <- function(x){
if(is.character(x) != TRUE){
stop("invalid")
}
if(nchar(x) !=7){
return(FALSE)
}
str_characters = tolower(strsplit(x,'')[[1]])
valid_characters = c(0:9, 'a','b','c','d','e','f')
if(str_characters[1] =='#'){
for (i in 2:nchar(x)){
if (!str_characters[i] %in% valid_characters){
return(FALSE)}
}
}
return(TRUE)
}
context("Test for is-hex-color")
test_that("is_hex() works as expected", {
expect_true(is_hex("#FF00A7"))
expect_true(is_hex("#ff0000"))
expect_true(is_hex("#123456"))
expect_true(is_hex("#12Fb56"))
expect_false(is_hex("FF0000"))
expect_false(is_hex("#1234GF"))
expect_false(is_hex("#1234567"))
expect_false(is_hex("blue"))
expect_error(is_hex(FF00A7))
expect_error(is_hex(TRUE))
})
context("Test for is-hex-color")
test_that("is_hex() works as expected", {
expect_true(is_hex("#FF00A7"))
expect_true(is_hex("#ff0000"))
expect_true(is_hex("#123456"))
expect_true(is_hex("#12Fb56"))
expect_false(is_hex("FF0000"))
expect_false(is_hex("#1234GF"))
expect_false(is_hex("#1234567"))
expect_false(is_hex("blue"))
expect_error(is_hex(FF00A7))
expect_error(is_hex(TRUE))
})
context("Test for is-hex-color")
test_that("is_hex() works as expected", {
expect_true(is_hex("#FF00A7"))
expect_true(is_hex("#ff0000"))
expect_true(is_hex("#123456"))
expect_true(is_hex("#12Fb56"))
expect_false(is_hex("FF0000"))
expect_false(is_hex("#1234GF"))
expect_false(is_hex("#1234567"))
expect_false(is_hex("blue"))
expect_error(is_hex(FF00A7))
expect_error(is_hex(TRUE))
})
is_hex_alpha <- function(x){
if(is.character(x) != TRUE){
stop("invalid")
}
if(nchar(x) !=9){
return(FALSE)
}
str_characters = tolower(strsplit(x,'')[[1]])
valid_characters = c(0:9, 'a','b','c','d','e','f')
if(str_characters[1] =='#'){
for (i in 2:nchar(x)){
if (!str_characters[i] %in% valid_characters){
return(FALSE)}
}
}
return(TRUE)
}
test_that("is_hex_alpha() works as expected", {
expect_true(is_hex_alpha("#FF000078"))
expect_true(is_hex_alpha("#ffda0078"))
expect_false(is_hex_alpha("#FF0000"))
4
expect_false(is_hex_alpha("#ffda00"))
expect_error(is_hex_alpha(FF00A7))
expect_error(is_hex_alpha(TRUE))
})
is_hex_alpha <- function(x){
if(is.character(x) != TRUE){
stop("invalid")
}
if(nchar(x) !=7){
return(FALSE)
}
str_characters = tolower(strsplit(x,'')[[1]])
valid_characters = c(0:9, 'a','b','c','d','e','f')
if(str_characters[1] =='#'){
for (i in 2:nchar(x)){
if (!str_characters[i] %in% valid_characters){
return(FALSE)}
}
}
return(TRUE)
}
test_that("is_hex_alpha() works as expected", {
expect_true(is_hex_alpha("#FF000078"))
expect_true(is_hex_alpha("#ffda0078"))
expect_false(is_hex_alpha("#FF0000"))
4
expect_false(is_hex_alpha("#ffda00"))
expect_error(is_hex_alpha(FF00A7))
expect_error(is_hex_alpha(TRUE))
})
is_hex_alpha <- function(x){
if(is.character(x) != TRUE){
stop("invalid")
}
if(nchar(x) !=9){
return(FALSE)
}
str_characters = tolower(strsplit(x,'')[[1]])
valid_characters = c(0:9, 'a','b','c','d','e','f')
if(str_characters[1] =='#'){
for (i in 2:nchar(x)){
if (!str_characters[i] %in% valid_characters){
return(FALSE)}
}
}
return(TRUE)
}
test_that("is_hex_alpha() works as expected", {
expect_true(is_hex_alpha("#FF000078"))
expect_true(is_hex_alpha("#ffda0078"))
expect_false(is_hex_alpha("#FF0000"))
4
expect_false(is_hex_alpha("#ffda00"))
expect_error(is_hex_alpha(FF00A7))
expect_error(is_hex_alpha(TRUE))
})
count_vowels(fox)
count_vowels(fox)
count_vowels(fox)
minkowski <- function(x, y, p = 1){
if (length(x) != length(y)) {
stop('x and y have different lengths')
}
else if(p =='max'){
distance_vector = rep(NA, length(x))
for (i in 1:length(x)) {
distance_vector[i] = abs(x[i]-y[i])
distance = max(distance_vector)
}
}
else if (p < 1){
stop('Invalid; p less that 1')
}
else {
distance_vector = rep(NA, length(x))
for (i in 1:length(x)) {
distance_vector[i] = (abs(x[i] - y[i]))^1/p
distance = sum(distance_vector))^p
}
}
return(distance)
}
minkowski <- function(x, y, p = 1){
if (length(x) != length(y)) {
stop('x and y have different lengths')
}
else if(p =='max'){
distance_vector = rep(NA, length(x))
for (i in 1:length(x)) {
distance_vector[i] = abs(x[i]-y[i])
distance = max(distance_vector)
}
}
else if (p < 1){
stop('Invalid; p less that 1')
}
else {
distance_vector = rep(NA, length(x))
for (i in 1:length(x)) {
distance_vector[i] = (abs(x[i] - y[i]))^1/p
distance = (sum(distance_vector))^p
}
}
return(distance)
}
minkowski <- function(x, y, p = 1){
if (length(x) != length(y)) {
stop('x and y must have the same lengths')
}
else if(p =='max'){
distance_vector = rep(NA, length(x))
for (i in 1:length(x)) {
distance_vector[i] = abs(x[i]-y[i])
distance = max(distance_vector)
}
}
else if (p < 1){
stop('Invalid; p less that 1')
}
else {
distance_vector = rep(NA, length(x))
for (i in 1:length(x)) {
distance_vector[i] = (abs(x[i] - y[i]))^1/p
distance = (sum(distance_vector))^p
}
}
return(distance)
}
context("Tests for minkowski()")
test_that("minkowski works as expected", {
point1 <- c(0, 0)
point2 <- c(1, 1)
point3 <- sqrt(c(2, 2))
point4 <- c(0, 1)
point5 <- c(1, 1, 1)
expect_equal(minkowski(point1, point2, p = 1), 2)
expect_equal(minkowski(point1, point3, p = 2), 2)
expect_equal(minkowski(point1, point2, p = 'max'), 1)
expect_length(minkowski(point1, point2, p = 1), 1)
expect_type(minkowski(point1, point2, p = 1), 'double')
expect_error(minkowski(point4, point5, p = 1))
expect_error(minkowski(point1, point2, p = 0.5))
expect_error(minkowski(point1, point2, p = 'min'))
})
# include a header!
library('testthat')
functions <- dir('../code/functions')
lapply(paste0('../code/functions/', functions), source)
setwd("~/Desktop/hw-stat133/workout2/code/functions")
setwd("~/Desktop/hw-stat133/workout2/code/tests")
# include a header!
library('testthat')
functions <- dir('../code/functions')
lapply(paste0('../code/functions/', functions), source)
sink(file = 'test-output.txt')
test_dir('../code/tests')
sink()
setwd("~/Desktop/hw-stat133/workout2/code/functions")
setwd("~/Desktop/hw-stat133/workout2/code/tests")
setwd("~/Desktop/hw-stat133/workout2/output")
setwd("~/Desktop/hw-stat133/workout2/code/functions")
setwd("~/Desktop/hw-stat133/workout2/code/tests")
setwd("~/Desktop/hw-stat133/workout2/code/functions")
setwd("~/Desktop/hw-stat133/workout2/code/tests")
setwd("~/Desktop/hw-stat133/workout2/code/functions")
setwd("~/Desktop/hw-stat133/workout2/code/tests")
# include a header!
library('testthat')
functions <- dir('../code/functions')
lapply(paste0('../code/functions/', functions), source)
source('~/Desktop/hw-stat133/workout2/output/run-tests.R')
source('~/Desktop/hw-stat133/workout2/output/run-tests.R')
functions <- dir('../code/functions')
lapply(paste0('../code/functions/', functions), source)
sink(file = 'test-output.txt')
test_dir('../code/tests')
sink()
source('~/Desktop/hw-stat133/workout2/output/run-tests.R')
setwd("~/Desktop/hw-stat133/workout2/output")
functions <- dir('../code/functions')
lapply(paste0('../code/functions/', functions), source)
sink(file = 'test-output.txt')
test_dir('../code/tests')
sink()
reverse_chars<- function(x){
reverse <- nchar(x):1
split<- strsplit(x, split ='')
word_reversed <- split[[1]][reverse]
paste(word_reversed, collapse = '')
}
context("Test for reverse_chars")
test_that("reverse_chars() works as expected", {
pets <- "step on no pets"
ep <- "expecto patronum"
pe <- "munortap otcepxe"
car_cat <- "Was it a car or a cat I saw?"
tac_rac <- "?was I tac a ro rac a ti saW"
expect_equal(reverse_chars(pets), pets)
expect_equal(reverse_chars(ep), pe)
expect_equal(reverse_chars(car_cat), tac_rac)
expect_length(reverse_chars(car_cat), 1)
expect_type(reverse_chars(car_cat), "character")
expect_equal(nchar(reverse_chars(car_cat)), nchar(reverse_chars(tac_rac)))
})
